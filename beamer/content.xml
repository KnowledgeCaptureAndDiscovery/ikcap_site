<!-- <?xml version='1.0'?> -->

<!--

IF YOU CAN READ THIS, YOUR BROWSER DOESN'T SUPPORT XML.

PLEASE UPDATE YOUR BROWSER, OR VIEW THE HTML VERSION OF THIS PAGE.

-->
<!--
When the schema works, reference it like this; change the project tag below to this
<project xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation = "isd-personnel.xsd">
-->
<project>
  <name>Beamer</name>
  <title>Assisting Users with To-Do Lists</title>

  <description>
    <short>
	In this project, we are investigating how to assist users with to-do lists.  Our goal is to assist users by mapping to-dos into capabilities of agents or services that could carry out the task that the user intends.
    </short>

    <long>
	 <p>To-do lists have been found to be the most popular personal information management tools, yet there is no automated system to interpret and act upon them when appropriate on behalf of the user.</p>

	 <p>In this project, we are investigating how to assist users with to-do lists.  Our goal is to assist users by mapping to-dos into capabilities of agents or services that could carry out the task that the user intends.  Automating to-do lists is challenging, not only because they are specified as free text but also because most items contain abbreviated tasks, many do not specify an action to be performed, and often refer to unrelated (personal) items.</p>

	 <p>We are developing Beamer, a system for interpreting to-do lists by mapping items to structured tasks that agents can perform on behalf of users.  Beamer uses paraphrase patterns to match to-do entries into agent capabilities.  Our evaluations have shown that this approach works remarkably well, and can handle the concise expressions and idiosyncratic grammar of to-dos.</p>
    </long>
  </description>

  <status>
    <short>
	 <ul>
	 <li>Beamer has been integrated with the <a href="http://caloproject.sri.com">CALO</a> and <a href="http://www.radar.cs.cmu.edu/">Radar</a> systems for office assistance.</li>

	 <li>We just released a <a href="http://apps.facebook.com/todo-lists">To-do list management application for FaceBook</a>.  You can try it out <a href="http://apps.facebook.com/todo-lists">here</a>.  This application will soon be connected to Beamer to provide interpretation and assistance.</li>
	 </ul>
    </short>

    <long>
	 <ul>
	 <li>Beamer has been integrated with the <a href="http://caloproject.sri.com">CALO</a> and <a href="http://www.radar.cs.cmu.edu/">Radar</a> systems for office assistance.</li>

	 <li>We just released a <a href="http://apps.facebook.com/todo-lists">To-do list management application for FaceBook</a>.  You can try it out <a href="http://apps.facebook.com/todo-lists">here</a>.  This application will soon be connected to Beamer to provide interpretation and assistance.</li>
	 </ul>
    </long>
  </status>

  <research>
    <short>
      Todo-lists, task automation, paraphrase based systems
    </short>
    <long>
	 <p>To-do lists have been found to be the most popular personal information management tools, yet there is no automated system to interpret and act upon them when appropriate on behalf of the user.</p>

	 <p>There are many challenges in interpreting to-dos.  First, to-dos are stated in natural language while agent capabilities use a formal representation that is far from what a user would state.  Second, to-do lists contain many entries that are personal items that do not lend themselves to automation by agents or services.  Third, to-dos tend to be short and as a result often omit important information necessary to specify the task.  Part of our work has been an extensive analysis of to-do list entries obtained from users so we could better understand these challenges.</p>

	 <p>We are developing Beamer, a system for interpreting to-do lists by mapping items to structured tasks that agents can perform on behalf of users.  Since the format of to-do entries is not very amenable to natural language processing tools that can parse and create a structured interpretation, it is hard to use existing and commonly-used natural language techniques.  Our approach is to exploit paraphrases of the target tasks that the agents can perform and that specify how the free-text maps to the task arguments. As users manually assign to-do to agents for automation, our system improves its performance by learning new paraphrase patterns.</p>

	 <p>Beamer processes to-dos in a six-phase process, shown below.  The left side shows the kind of result expected from each step, and the right side gives an example.</p>

	 <img src="six-phase-diagram.jpg"/>

	 <p><b>Relevance</b> involves determining whether a to-do list entry is relevant to any of the agent capabilities.  That is, whether the to-do entry is within the scope of the tasks that the system can automate for the user.  If the system has good performance in this step, it can help the user by highlighting those entries in the to-do list so that the user is aware that there are agents that could automate them.  <b>Selection</b> involves finding the agent capability (or target task) that is appropriate for automating a given to-do entry.  Note that the system may generate several candidates.  If the system has good performance in this step, the top ranked candidate can be shown to the user as a possible way to automate the entry.  Other candidates, and there should not be too many, can be shown as alternatives to the user as a pull-down menu.  <b>Association</b> will determine which chunks of the to-do entry text correspond to which arguments in the target task.  Good performance in this step would allow the system to have the menu to task the agent pre-filled by those mapped arguments, requiring little or no editing from the user to task the agent.  <b>Recognition</b> finds an object in the system that corresponds to the text chunk of an argument.  For example, the to-do entry may contain the first name of a person and the recognition phase would find that person's formal representation, which will allow the agent internally to access email addresses or other information useful for the task.  Notice that not all arguments can be mapped to formal objects.  An example is the topic of a meeting, which is only useful (at least in our work) to the other human attendees.   <b>Completion</b> involves completing the other argument values not included in the to-do list entry, either by using default values, typical values learned for each user, or values inferred from the user's context (e.g., other meetings, emails, etc.)  <b>Invocation</b> involves deciding whether the agent should be invoked, which can be done with the user's explicit consent or using some measure of adjustable autonomy for the task.</p>

	 <p>Notice that the automation of each of these steps can be turned into an interface extension that can be useful to the user in its own right.</p>

	 <p>Our evaluations have shown that Beamer works remarkably well, and can handle the concise expressions and idiosyncratic grammar of to-dos.</p>
    </long>
  </research>

  <link>
	<a href="http://caloproject.sri.com">CALO project at SRI</a>
  </link>
  <link>
	<a href="http://www.darpa.mil/IPTO/programs/pal/pal.asp">The PAL program</a>
  </link>

<!-- Demo -->
<demo>
     <center>
	  <img src="tn_comingsoon.jpg"/>
	  </center>
</demo>
</project>
